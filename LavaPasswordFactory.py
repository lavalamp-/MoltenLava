# -*- coding: utf-8 -*-
'''
@author: lavalamp

    Copyright 2014
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
'''
import logging
import tempfile
import base64
import gzip
import itertools
import argparse
from lib import LavaLib
from datetime import date
from datetime import datetime


top_ten_thousand_enc = ""


class LavaPasswordChecker(object):

    def __init__(
            self,
            min_caps=None,
            max_caps=None,
            min_special_chars=None,
            max_special_chars=None,
            min_length=None,
            max_length=None,
            illegal_chars=None,
            special_chars="!@#$%^&*()-_=+{}|[]\\;:'\",<.>/?",
            *args,
            **kwargs
            ):
        self._min_caps = min_caps
        self._max_caps = max_caps
        self._min_special_chars = min_special_chars
        self._max_special_chars = max_special_chars
        self._min_length = min_length
        self._max_length = max_length
        self._illegal_chars = illegal_chars
        self._special_chars = special_chars
        self.__report_to_log()

    def __report_to_log(self):
        logger.info("LavaPasswordChecker instantiated with the following constraints:")
        if self._min_caps:
            logger.info(
                "- Passwords must contain at least %d capital letters."
                % (self._min_caps)
            )
        if self._max_caps:
            logger.info(
                "- Passwords must contain at most %d capital letters."
                % (self._max_caps)
            )
        if self._min_special_chars:
            logger.info(
                "- Passwords must contain at least %d special characters."
                % (self._min_special_chars)
            )
        if self._max_special_chars:
            logger.info(
                "- Passwords must contain at most %d special characters."
                % (self._max_special_chars)
            )
        if self._min_length:
            logger.info(
                "- Passwords must be at least %d characters long."
                % (self._min_length)
            )
        if self._max_length:
            logger.info(
                "- Passwords must be at most %d characters long."
                % (self._max_length)
            )
        if self._illegal_chars:
            logger.info(
                "- The follow characters are not allowed in the password list: %s."
                % (self._illegal_chars)
            )
        logger.info(
            "- The characters included in the 'special characters' list are: %s."
            % self._special_chars
        )

    def is_valid(self, term):
        """Checks to see if the input term is a valid password based on the
        configuration of the given LavaPasswordChecker.
        """
        if self._min_caps:
            if len(filter(lambda x: x.isupper(), term)) < self._min_caps:
                return False
        if self._max_caps:
            if len(filter(lambda x: x.isupper(), term)) > self._max_caps:
                return False
        if self._min_special_chars:
            if len(filter(lambda x: x in self._special_chars, term)) < self._min_special_chars:
                return False
        if self._max_special_chars:
            if len(filter(lambda x: x in self._special_chars, term)) > self._max_special_chars:
                return False
        if self._min_length:
            if len(term) < self._min_length:
                return False
        if self._max_length:
            if len(term) > self._max_length:
                return False
        if self._illegal_chars:
            if filter(lambda x: x in self._illegal_chars, term):
                return False
        return True

    def filter_list(self, input_list):
        """Filters the input list by all of the rules associated with the
        given LavaPasswordChecker.
        """
        logger.info(
            "Starting filtering process with list of length %d."
            % (len(input_list))
        )
        slen = len(input_list)
        if self._min_caps:
            blen = len(input_list)
            input_list = filter(lambda x: sum([1 if y.isupper() else 0 for y in x]) >= self._min_caps, input_list)
            logger.debug(
                "A total of %d terms were removed based on minimum caps restriction of %d. New length is %d."
                % (blen - len(input_list), self._min_caps, len(input_list))
            )
        if self._max_caps:
            blen = len(input_list)
            input_list = filter(lambda x: sum([1 if y.isupper() else 0 for y in x]) <= self._max_caps, input_list)
            logger.debug(
                "A total of %d terms were removed based on maximum caps restriction of %d. New length is %d."
                % (blen - len(input_list), self._max_caps, len(input_list))
            )
        if self._min_special_chars:
            blen = len(input_list)
            input_list = filter(lambda x: sum([1 if y in self._special_chars else 0 for y in x]) >= self._min_special_chars, input_list)
            logger.debug(
                "A total of %d terms were removed based on minimum special characters restriction of %d. New length is %d."
                % (blen - len(input_list), self._min_special_chars, len(input_list))
            )
        if self._max_special_chars:
            blen = len(input_list)
            input_list = filter(lambda x: sum([1 if y in self._special_chars else 0 for y in x]) <= self._max_special_chars, input_list)
            logger.debug(
                "A total of %d terms were removed based on maximum special characters restriction of %d. New length is %d."
                % (blen - len(input_list), self._max_special_chars, len(input_list))
            )
        if self._min_length:
            blen = len(input_list)
            input_list = filter(lambda x: len(x) >= self._min_length, input_list)
            logger.debug(
                "A total of %d terms were removed based on minimum term length restriction of %d. New length is %d."
                % (blen - len(input_list), self._min_length, len(input_list))
            )
        if self._max_length:
            blen = len(input_list)
            input_list = filter(lambda x: len(x) <= self._max_length, input_list)
            logger.debug(
                "A total of %d terms were removed based on maximum term length restriction of %d. New length is %d."
                % (blen - len(input_list), self._max_length, len(input_list))
            )
        if self._illegal_chars:
            blen = len(input_list)
            input_list = filter(lambda x: sum([1 if y in self._illegal_chars else 0 for y in x]) == 0, input_list) #TODO clean this up
            logger.debug(
                "A total of %d terms were removed based on the illegal character list of %s. New length is %d."
                % (blen - len(input_list), self._illegal_chars, len(input_list))
            )
        blen = len(input_list)
        input_list = list(set(input_list))
        logger.debug(
            "A total of %d terms were removed as duplicates. New length is %d."
            % (blen - len(input_list), len(input_list))
        )
        logger.info(
            "A grand total of %d terms were removed in the filtering process. New list length is %d."
            % (slen-len(input_list), len(input_list))
        )
        return input_list


class LavaPasswordFactory(object):
    """A class for creating password lists for both online and offline attacks.

    The LavaPasswordFactory takes a list of words as inputs and,
    depending on whether the LavaPasswordFactory is initialized for online
    (is_list_large=False) or offline (is_list_large=True) attacks, will produce
    an appropriately-sized list of potential passwords. In both modes, the
    generation process will use the seed_list property as the list to base all
    other permutations off of. In online mode, the seed_list property will
    contain all of the words in the input list in lowercase, uppercase, snake
    case, and title case format (ie: ['one', 'two'] becomes ['one', 'ONE',
    'One', 'two', 'TWO', 'Two', 'OnE', 'TwO']). In offline mode, the seed_list
    will contain all items within the online mode in addition to all possible
    non-repeating permutations of the words. As this is the list that all
    other password creation processes is based off of, the size of this list
    is exponentially (if not combinatorially) related to the size of the output
    password list.

    The following terms are used to describe smaller password lists which are
    used as components in building finalized password lists:

    - [WORD] - Words from the seed_list property.
    - [PASS] - Common password terms (ie: password, secret, access). The list
        of common terms depends on the running mode (offline vs. online) of 
        the LavaPasswordFactory instance.
    - [PASS 1337] - 1337-speak permutations of common password terms. The list
        of common terms depends on the running mode (offline vs. online) of
        the LavaPasswordFactory instance.
    - [WORD 1337] - 1337-speak permutations of the words in the seed_list
        property. The number of possible character replacements as well as
        the number of maximum characters replaced per word is determined
        by the running mode (offline vs. online) of the LavaPasswordFactory.
        In offline mode, up to five characters are replaced, whereas in online
        mode up to three are replaced.
    - [<NUM> DIGIT #] - A number that is up to <NUM> digits long.
    - [MONTH] - A three-character abbreviation of all the months in the year
        (ie: nov, dec, jan, .. ). When in offline mode, all of the months
        will also be capitalized as well as title cased.
    - [YEAR SHORT] - A two digit representation of the year (ie: 1988 is 88).
        When in online mode, the number of years that this list goes back
        is 50, whereas in offline mode it goes back 100.
    - [YEAR LONG] - A four digit representation of the year. When in online
        mode, the number of years that this list goes back is 50, whereas in
        offline mode it goes back 100.
    - [NUM SHIFT] - A list of all digits on the QWERTY keyboard with the
        special character that occurs when shift is held when hitting that
        digit (ie: 1!, 2@, 3#, .. ). In offline mode, the order of these will be
        switched as well (ie: !1, @2, #3, .. ).
    - [CHAR <CHAR>] - This denotes the placement of a single character. For
        instance, [CHAR _] means placing the character "_" in the identified
        location.
    - [1234] - The sequence of characters "1234".
    - [<NUM> DIGIT SPECIAL] - <NUM> special characters from the shift+number 
        key range with the rule that the two special characters must be right
        next to one another on the keyboard (ex: !@, @#. #$, $%, .. )

    The following passwords are generated both in online and offline modes:

    - [WORD]
    - [WORD] + [1 DIGIT #]
    - [WORD] + [2 DIGIT #]
    - [WORD] + [3 DIGIT #]
    - [WORD] + [NUM SHIFT]
    - [WORD] + [2 DIGIT SPECIAL]
    - [WORD] + [3 DIGIT SPECIAL]
    - [WORD 1337]
    - [WORD 1337] + [1 DIGIT #]
    - [WORD 1337] + [2 DIGIT #]
    - [WORD 1337] + [3 DIGIT #]
    - [WORD 1337] + [NUM SHIFT]
    - [WORD 1337] + [2 DIGIT SPECIAL]
    - [WORD 1337] + [3 DIGIT SPECIAL]
    - [PASS]
    - [PASS] + [1 DIGIT #]
    - [PASS] + [2 DIGIT #]
    - [PASS] + [3 DIGIT #]
    - [PASS] + [NUM SHIFT]
    - [PASS] + [2 DIGIT SPECIAL]
    - [PASS] + [3 DIGIT SPECIAL]
    - [PASS 1337]
    - [PASS 1337] + [1 DIGIT #]
    - [PASS 1337] + [2 DIGIT #]
    - [PASS 1337] + [3 DIGIT #]
    - [PASS 1337] + [NUM SHIFT]
    - [PASS 1337] + [2 DIGIT SPECIAL]
    - [PASS 1337] + [3 DIGIT SPECIAL]
    - [WORD] + [PASS]
    - [WORD 1337] + [PASS]
    - [WORD] + [PASS 1337]
    - [WORD 1337] + [PASS 1337]
    - [WORD] + [PASS]
    - [WORD] + [MONTH] + [YEAR SHORT]
    - [WORD] + [MONTH] + [YEAR LONG]
    - [WORD] + [1234]

    The following passwords are generated in offline mode only:

    - [WORD 1337] + [1 DIGIT #]
    - [WORD 1337] + [2 DIGIT #]
    - [WORD] + [PASS 1337]
    - [WORD] + [PASS 1337] + [1 DIGIT #]
    - [WORD] + [YEAR SHORT]
    - [WORD] + [YEAR LONG]
    - [WORD 1337] + [YEAR SHORT]
    - [WORD 1337] + [YEAR LONG]
    - [WORD 1337] + [MONTH] + [YEAR SHORT]
    - [WORD 1337] + [MONTH] + [YEAR LONG]
    - [PASSWORD] + [MONTH] + [YEAR SHORT]
    - [PASSWORD] + [MONTH] + [YEAR LONG]
    - [PASSWORD 1337] + [MONTH] + [YEAR SHORT]
    - [PASSWORD 1337] + [MONTH] + [YEAR LONG]
    - [WORD] + [CHAR _] + [PASSWORD]
    - [WORD] + [CHAR _] + [PASSWORD 1337]
    - [WORD 1337] + [1234]
    - [PASS] + [WORD]
    - [1 DIGIT #] + [WORD 1337]
    - [2 DIGIT #] + [WORD 1337]
    - [NUM SHIFT] + [WORD]
    - [WORD] + [PASS 1337] + [2 DIGIT #]
    - [1234] + [WORD]
    - [1234] + [WORD 1337]

    """

    _common_replacements = {
        "a": [
            "@",
            "4",
            ],
        "e": [
            "3",
            ],
        "i": [
            "1",
            "!",
            "|",
            ],
        "s": [
            "$",
            "5",
            ],
        "t": [
            "7",
            "1",
            ],
        "b": [
            "8",
            ],
        "g": [
            "6",
            "9",
            ],
        "l": [
            "1",
            "!",
            "|",
            ],
        "o": [
            "0"
            ],
    }
    _password_list_large = [
        'password',
        'PASSWORD',
        'Password',
        'PaSsWoRd',
        'pass',
        'PASS',
        'Pass',
        'PaSs',
        'admin',
        'ADMIN',
        'Admin',
        'AdMiN',
        'secret',
        'SECRET',
        'Secret',
        'SeCrEt',
        'access',
        'ACCESS',
        'Access',
        'AcCeSs',
    ]
    _password_list_small = [
        'password',
        'PASSWORD',
        'Password',
        'PaSsWoRd',
        'pass',
        'PASS',
        'Pass',
        'PaSs',
        'admin',
        'Admin',
        'secret',
        'Secret'
    ]

    def __init__(
            self,
            input_list,
            is_offline=False,
            min_length=8,
            max_length=12,
            *args,
            **kwargs
            ):
        self._is_offline = is_offline
        self._input_list = input_list
        self._max_leet_replace = 5 if self._is_offline else 3
        self._min_length = min_length
        self._max_length = max_length
        self.__expand_common_replacements()

    def __do_leet_replacements(self, input_list):
        to_return = []
        special_keys = self._common_replacements.keys()
        for cur_item in input_list:
            rep_positions = []
            for (counter, char) in enumerate(cur_item):
                if char in special_keys:
                    rep_positions.append(counter)
            for perm_size in range(1, self._max_leet_replace+1):
                rep_possibilities = itertools.combinations(rep_positions, perm_size)
                for cur_possibility in rep_possibilities:
                    to_return.extend(self.__replace_characters_at_positions(cur_item, cur_possibility))
        logger.debug(
            "Completed special character replacement. Input list length: %d. Input permutation length range: [%d, %d]. Resulting list length: %d."
            % (len(input_list), 1, self._max_leet_replace, len(to_return))
        )
        return to_return

    def __expand_common_replacements(self):
        for curkey in self._common_replacements.keys():
            self._common_replacements[curkey.upper()] = self._common_replacements[curkey]

    def __gen(self, input_length):
        logger.info(
            "Now starting generation of passwords of length %d."
            % (input_length)
        )
        month_year_short = ["".join(x) for x in itertools.product(self.months, self.years_short)]
        month_year_long = ["".join(x) for x in itertools.product(self.months, self.years_long)]
        self.__log_for_length("[WORD]", input_length)
        for pw in self.word_list:
            yield pw[:input_length]
        self.__log_for_length("[WORD] + [1 DIGIT #]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-1] for y in self.word_list], self.one_digit_numbers)]:
            yield pw
        self.__log_for_length("[WORD] + [2 DIGIT #]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.word_list], self.two_digit_numbers)]:
            yield pw
        self.__log_for_length("[WORD] + [3 DIGIT #]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-3] for y in self.word_list], self.three_digit_numbers)]:
            yield pw
        self.__log_for_length("[WORD] + [NUM SHIFT]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.word_list], self.num_shift)]:
            yield pw
        self.__log_for_length("[WORD] + [2 DIGIT SPECIAL]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.word_list], self.two_digit_specials)]:
            yield pw
        self.__log_for_length("[WORD] + [3 DIGIT SPECIAL]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-3] for y in self.word_list], self.three_digit_specials)]:
            yield pw
        self.__log_for_length("[WORD 1337]", input_length)
        for pw in self.word_list_leet:
            yield pw[:input_length]
        self.__log_for_length("[WORD 1337] + [1 DIGIT #]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-1] for y in self.word_list_leet], self.one_digit_numbers)]:
            yield pw
        self.__log_for_length("[WORD 1337] + [2 DIGIT #]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.word_list_leet], self.two_digit_numbers)]:
            yield pw
        self.__log_for_length("[WORD 1337] + [3 DIGIT #]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-3] for y in self.word_list_leet], self.three_digit_numbers)]:
            yield pw
        self.__log_for_length("[WORD 1337] + [NUM SHIFT]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.word_list_leet], self.num_shift)]:
            yield pw
        self.__log_for_length("[WORD 1337] + [2 DIGIT SPECIAL]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.word_list_leet], self.two_digit_specials)]:
            yield pw
        self.__log_for_length("[WORD 1337] + [3 DIGIT SPECIAL]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-3] for y in self.word_list_leet], self.three_digit_specials)]:
            yield pw
        self.__log_for_length("[PASS]", input_length)
        for pw in self.password_list:
            yield pw[:input_length]
        self.__log_for_length("[PASS] + [1 DIGIT #]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-1] for y in self.password_list], self.one_digit_numbers)]:
            yield pw
        self.__log_for_length("[PASS] + [2 DIGIT #]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.password_list], self.two_digit_numbers)]:
            yield pw
        self.__log_for_length("[PASS] + [3 DIGIT #]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-3] for y in self.password_list], self.three_digit_numbers)]:
            yield pw
        self.__log_for_length("[PASS] + [NUM SHIFT]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.password_list], self.num_shift)]:
            yield pw
        self.__log_for_length("[PASS] + [2 DIGIT SPECIAL]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.password_list], self.two_digit_specials)]:
            yield pw
        self.__log_for_length("[PASS] + [3 DIGIT SPECIAL]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-3] for y in self.password_list], self.three_digit_specials)]:
            yield pw
        self.__log_for_length("[PASS 1337]", input_length)
        for pw in self.password_list_leet:
            yield pw[:input_length]
        self.__log_for_length("[PASS 1337] + [1 DIGIT #]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-1] for y in self.password_list_leet], self.one_digit_numbers)]:
            yield pw
        self.__log_for_length("[PASS 1337] + [2 DIGIT #]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.password_list_leet], self.two_digit_numbers)]:
            yield pw
        self.__log_for_length("[PASS 1337] + [3 DIGIT #]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-3] for y in self.password_list_leet], self.three_digit_numbers)]:
            yield pw
        self.__log_for_length("[PASS 1337] + [NUM SHIFT]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.password_list_leet], self.num_shift)]:
            yield pw
        self.__log_for_length("[PASS 1337] + [2 DIGIT SPECIAL]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.password_list_leet], self.two_digit_specials)]:
            yield pw
        self.__log_for_length("[PASS 1337] + [3 DIGIT SPECIAL]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-3] for y in self.password_list_leet], self.three_digit_specials)]:
            yield pw
        self.__log_for_length("[WORD] + [PASS]", input_length)
        for pw in ["".join(x) for x in itertools.product(self.word_list, self.password_list)]:
            yield pw[:input_length]
        self.__log_for_length("[WORD 1337] + [PASS]", input_length)
        for pw in ["".join(x) for x in itertools.product(self.word_list_leet, self.password_list)]:
            yield pw[:input_length]
        self.__log_for_length("[WORD] + [PASS 1337]", input_length)
        for pw in ["".join(x) for x in itertools.product(self.word_list, self.password_list_leet)]:
            yield pw[:input_length]
        self.__log_for_length("[WORD 1337] + [PASS 1337]", input_length)
        for pw in ["".join(x) for x in itertools.product(self.word_list_leet, self.password_list_leet)]:
            yield pw[:input_length]
        self.__log_for_length("[WORD] + [MONTH] + [YEAR SHORT]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-5] for y in self.word_list], month_year_short)]:
            yield pw
        self.__log_for_length("[WORD] + [MONTH] + [YEAR LONG]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-7] for y in self.word_list], month_year_long)]:
            yield pw
        self.__log_for_length("[WORD] + [1234]", input_length)
        for pw in ["".join(x) for x in itertools.product([y[:input_length-4] for y in self.word_list], ["1234", ])]:
            yield pw
        if self._is_offline:
            word_pass_leet = ["".join(x) for x in itertools.product(self.word_list, self.password_list_leet)]
            word_char__ = ["".join(x) for x in itertools.product(self.word_list, ["_", ])]
            self.__log_for_length("[WORD 1337] + [1 DIGIT #]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-1] for y in self.word_list_leet], self.one_digit_numbers)]:
                yield pw
            self.__log_for_length("[WORD 1337] + [2 DIGIT #]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.word_list_leet], self.two_digit_numbers)]:
                yield pw
            self.__log_for_length("[WORD] + [PASS 1337]", input_length)
            for pw in word_pass_leet:
                yield pw[:input_length]
            self.__log_for_length("[WORD] + [PASS 1337] + [1 DIGIT #]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-1] for y in word_pass_leet], self.one_digit_numbers)]:
                yield pw
            self.__log_for_length("[WORD] + [YEAR SHORT]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.word_list], self.years_short)]:
                yield pw
            self.__log_for_length("[WORD] + [YEAR LONG]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-4] for y in self.word_list], self.years_long)]:
                yield pw
            self.__log_for_length("[WORD 1337] + [YEAR SHORT]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in self.word_list_leet], self.years_short)]:
                yield pw
            self.__log_for_length("[WORD 1337] + [YEAR LONG]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-4] for y in self.word_list_leet], self.years_long)]:
                yield pw
            self.__log_for_length("[WORD 1337] + [MONTH] + [YEAR SHORT]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-5] for y in self.word_list_leet], month_year_short)]:
                yield pw
            self.__log_for_length("[WORD 1337] + [MONTH] + [YEAR LONG]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-7] for y in self.word_list_leet], month_year_long)]:
                yield pw
            self.__log_for_length("[PASSWORD] + [MONTH] + [YEAR SHORT]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-5] for y in self.password_list], month_year_short)]:
                yield pw
            self.__log_for_length("[PASSWORD] + [MONTH] + [YEAR LONG]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-7] for y in self.password_list], month_year_long)]:
                yield pw
            self.__log_for_length("[PASSWORD 1337] + [MONTH] + [YEAR SHORT]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-5] for y in self.password_list_leet], month_year_short)]:
                yield pw
            self.__log_for_length("[PASSWORD 1337] + [MONTH] + [YEAR LONG]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-7] for y in self.password_list_leet], month_year_long)]:
                yield pw
            self.__log_for_length("[WORD] + [CHAR _] + [PASSWORD]", input_length)
            for pw in ["".join(x) for x in itertools.product(word_char__, self.password_list)]:
                yield pw[:input_length]
            self.__log_for_length("[WORD] + [CHAR _] + [PASSWORD 1337]", input_length)
            for pw in ["".join(x) for x in itertools.product(word_char__, self.password_list_leet)]:
                yield pw[:input_length]
            self.__log_for_length("[WORD 1337] + [1234]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-4] for y in self.word_list_leet], ["1234", ])]:
                yield pw
            self.__log_for_length("[PASS] + [WORD]", input_length)
            for pw in ["".join(x) for x in itertools.product(self.password_list, self.word_list)]:
                yield pw[:input_length]
            self.__log_for_length("[1 DIGIT #] + [WORD 1337]", input_length)
            for pw in ["".join(x) for x in itertools.product(self.one_digit_numbers, [y[:input_length-1] for y in self.word_list_leet])]:
                yield pw
            self.__log_for_length("[2 DIGIT #] + [WORD 1337]", input_length)
            for pw in ["".join(x) for x in itertools.product(self.two_digit_numbers, [y[:input_length-2] for y in self.word_list_leet])]:
                yield pw
            self.__log_for_length("[NUM SHIFT] + [WORD]", input_length)
            for pw in ["".join(x) for x in itertools.product(self.num_shift, [y[:input_length-2] for y in self.word_list_leet])]:
                yield pw
            self.__log_for_length("[WORD] + [PASS 1337] + [2 DIGIT #]", input_length)
            for pw in ["".join(x) for x in itertools.product([y[:input_length-2] for y in word_pass_leet], self.two_digit_numbers)]:
                yield pw
            self.__log_for_length("[1234] + [WORD]", input_length)
            for pw in ["".join(x) for x in itertools.product(["1234", ], [y[:input_length-4] for y in self.word_list])]:
                yield pw
            self.__log_for_length("[1234] + [WORD 1337]", input_length)
            for pw in ["".join(x) for x in itertools.product(["1234", ], [y[:input_length-4] for y in self.word_list_leet])]:
                yield pw
        logger.info(
            "Password generation of length %d completed."
            % (input_length)
        )

    def __log_for_length(self, term, length):
        logger.debug(
            "Generating %s with length <= %d."
            % (term, length)
        )

    def __replace_characters_at_positions(self, input_string, input_positions):
        rep_list = [input_string, ]
        for cur_position in input_positions:
            cur_list = []
            for cur_replacement in self._common_replacements[input_string[cur_position]]:
                for cur_string in rep_list:
                    csl = list(cur_string)
                    csl[cur_position] = cur_replacement
                    cur_list.append("".join(csl))
            rep_list = cur_list
        return rep_list

    def gen(self):
        """Generates all of the passwords as configured by the
        LavaPasswordFactory instance.
        """
        logger.info("Now starting full password list generation.")
        for x in range(self._min_length, self._max_length + 1):
            for y in self.__gen(x):
                yield y
        logger.info("Completed full password list generation.")

    @property
    def num_shift(self):
        try:
            self._num_shift
        except:
            logger.debug("Generating the num_shift property.")
            self._num_shift = ['1!', '2@', '3#', '4$', '5%', '6^', '7&', '8*', '9(', '0)']
            if self._is_offline:
                self._num_shift.extend(['!1', '@2', '#3', '$4', '%5', '^6', '&7', '*8', '(9', ')0'])
        return self._num_shift

    @property
    def years_long(self):
        try:
            self._years_long
        except:
            logger.debug("Generating years_long property.")
            back = 100 if self._is_offline else 50
            this_year = date.today().year
            self._years_long = [str(x) for x in range(this_year - back,this_year + 1)]
        return self._years_long

    @property
    def years_short(self):
        try:
            self._years_short
        except:
            logger.debug("Generating years_short property.")
            back = 100 if self._is_offline else 50
            this_year = date.today().year
            self._years_short = [str(x)[2:] for x in range(this_year - back,this_year + 1)]
        return self._years_short

    @property
    def months(self):
        try:
            self._months
        except:
            logger.debug("Generating months property.")
            months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']
            self._months = []
            self._months.extend(months)
            if self._is_offline:
                self._months.extend([x.upper() for x in months])
                self._months.extend([x.title() for x in months])
        return self._months

    @property
    def three_digit_numbers(self):
        try:
            self._three_digit_numbers
        except:
            logger.debug("Generating three_digit_numbers property.")
            self._three_digit_numbers = [str(x) for x in list(range(100,1000))]
        return self._three_digit_numbers

    @property
    def two_digit_numbers(self):
        try:
            self._two_digit_numbers
        except:
            logger.debug("Generating two_digit_numbers property.")
            self._two_digit_numbers = [str(x).zfill(2) for x in list(range(0,100))]
        return self._two_digit_numbers

    @property
    def one_digit_numbers(self):
        try:
            self._single_digit_numbers
        except:
            logger.debug("Generating one_digit_numbers property.")
            self._single_digit_numbers = [str(x) for x in list(range(0,10))]
        return self._single_digit_numbers

    @property
    def three_digit_specials(self):
        try:
            self._three_digit_specials
        except:
            logger.debug("Generating three_digit_specials property.")
            self._three_digit_specials = ['!@#', '@#$', '#$%', '$%^', '%^&', '^&*', '&*(', '*()']
        return self._three_digit_specials

    @property
    def two_digit_specials(self):
        try:
            self._two_digit_specials
        except:
            logger.debug("Generating two_digit_specials property.")
            self._two_digit_specials = ['!@', '@#', '#$', '$%', '%^', '^&', '&*', '*(', '()']
        return self._two_digit_specials

    @property
    def password_list_leet(self):
        try:
            self._password_list_leet
        except:
            logger.debug("Generating password_list_leet property.")
            self._password_list_leet = self.__do_leet_replacements(self.password_list)
        return self._password_list_leet

    @property
    def password_list(self):
        try:
            self._password_list
        except:
            logger.debug("Setting password_list property.")
            self._password_list = self._password_list_large if self._is_offline else self._password_list_small
        return self._password_list

    @property
    def word_list_leet(self):
        try:
            self._word_list_leet
        except:
            logger.debug("Generating word_list_leet property.")
            self._word_list_leet = self.__do_leet_replacements(self.word_list)
        return self._word_list_leet

    @property
    def basic_transformations(self):
        """Get a list of all of the words supplied to the LavaPasswordFactory
        instance in full lowercase, full uppercase, and title case.
        """
        try:
            self._basic_transformations
        except:
            logger.debug("Generating basic_transformations property.")
            self._basic_transformations = [x.lower() for x in self._input_list]
            self._basic_transformations.extend([x.upper() for x in self._input_list])
            self._basic_transformations.extend([x.lower().title() for x in self._input_list])
            self._basic_transformations.extend(["".join([x[n].lower() if n%2 else x[n].upper() for n in range(len(x))]) for x in self._input_list])
        return self._basic_transformations

    @property
    def basic_permutations(self):
        """Get a list of passwords where the LavaPasswordFactory's
        seed list is permuted with itself. For instance, a list of
        ['one', 'two'] will give a basic_permutations of ['one', 'two',
        'onetwo', 'twoone'].
        """
        try:
            self._basic_permutations
        except:
            logger.debug("Generating basic_permutations property.")
            self._basic_permutations = []
            for permutation_length in range(1, len(self.basic_transformations) + 1):
                cur_set = []
                p = set(itertools.permutations(self.basic_transformations, permutation_length))
                # This is to prevent same word occurring twice, such as wordWORD
                for cur_tuple in p:
                    test_set = set([x.lower() for x in cur_tuple])
                    if len(test_set) == len(cur_tuple):
                        if len(cur_tuple) == 1:
                            cur_set.append(cur_tuple[0])
                        else:
                            cur_set.append("".join(cur_tuple))
                self._basic_permutations.extend(cur_set)
        return self._basic_permutations

    @property
    def word_list(self):
        """Get the basic list of terms that is used as a seed list
        for all other permutations performed by the LavaPasswordFactory.
        """
        return self.basic_permutations if self._is_offline else self.basic_transformations


def clean_arguments(arguments):
    try:
        arguments.input_list = arguments.input_list.strip().split(" ")
    except:
        pass
    return arguments


def do_clean(input_args):
    opts = vars(input_args)
    lpc = LavaPasswordChecker(**opts)
    logger.info(
        "Now cleaning passwords found in file '%s' and writing valid passwords to '%s'."
        % (input_args.input_file, input_args.output_file)
    )
    num_lines = 0
    num_pass = 0
    num_fail = 0
    with open(input_args.input_file, 'r') as fi:
        with open(input_args.output_file, 'w+') as fo:
            for cur_pass in fi:
                num_lines += 1
                if lpc.is_valid(cur_pass):
                    num_pass += 1
                    fo.write(cur_pass + "\n")
                else:
                    num_fail += 1
                if num_lines % 500000 == 0:
                    logger.info(
                        "Total passwords checked: %d. Total passwords passed: %d. Total passwords removed: %d."
                        % (num_lines, num_pass, num_fail)
                    )
    logger.info(
        "Password cleaning done! Total passwords checked: %d. Total passwords passed: %d. Total passwords removed: %d."
        % (num_lines, num_pass, num_fail)
    )


def do_generate(input_args):
    opts = vars(input_args)
    if input_args.is_offline:
        logger.info(
            "Now starting generation process for offline generation mode."
        )
        lpf = LavaPasswordFactory(**opts)
        lpc = LavaPasswordChecker(**opts)
        num_gen = 0
        num_pass = 0
        num_fail = 0
        with open(input_args.output_file, "w+") as f:
            for cur_pass in lpf.gen():
                num_gen += 1
                if lpc.is_valid(cur_pass):
                    num_pass += 1
                    f.write(cur_pass + "\n")
                else:
                    num_fail += 1
                if num_gen % 500000 == 0:
                    # print(cur_pass)
                    logger.info(
                        "Passwords generated: %d. Passed and written to file: %d. Failed validation checks: %d."
                        % (num_gen, num_pass, num_fail)
                    )
        logger.info(
            "File written successfully! Exiting."
        )
    else:
        logger.info(
            "Now starting generation process for online generation mode."
        )
        lpf = LavaPasswordFactory(**opts)
        results = []
        for cur_pass in lpf.gen():
            results.append(cur_pass)
        logger.info(
            "Adding top ten-thousand most common passwords to list."
        )
        results.extend(decode_top_ten_thousand())
        lpc = LavaPasswordChecker(**opts)
        clean_list = lpc.filter_list(results)
        logger.info(
            "Password generation and cleaning completed! Now writing to file %s."
            % (input_args.output_file)
        )
        with open(input_args.output_file, "w+") as f:
            f.write("\n".join(clean_list))
        logger.info(
            "File written successfully! Exiting."
        )


def decode_top_ten_thousand():
    with tempfile.TemporaryFile() as f:
        f.write(base64.b64decode(top_ten_thousand_enc))
        f.flush()
        f.seek(0)
        gzf = gzip.GzipFile(mode='rb', fileobj=f)
        contents = gzf.read()
    return contents.strip().split("\n")


def main():
    print_greeting()
    args = parse_arguments()
    args = clean_arguments(args)
    LavaLib.configure_logging(logger, args.log_level)
    start_time = datetime.now()
    logger.info(
        "Script invocation starting at time %s."
        % (start_time.strftime("%m/%d/%Y %H:%M:%S"))
    )
    args.func(args)
    end_time = datetime.now()
    elapsed = end_time - start_time
    logger.info(
        "Script completed at time %s. Elapsed time was %s seconds."
        % (end_time.strftime("%m/%d/%Y %H:%M:%S"), elapsed.seconds)
    )


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="LavaPasswordFactory - for all your password list creation needs."
    )
    subparsers = parser.add_subparsers(help='sub-command help')
    parser.add_argument(
        "--log-level",
        required=False,
        help="The log message level to receive when running the script. Valid "
            "values are DEBUG, INFO, WARNING, ERROR, CRITICAL.",
        action="store",
        dest="log_level",
        metavar="<DEBUG|INFO|WARNING|ERROR|CRITICAL>",
        default="INFO",
        type=str
    )
    generator_parser = subparsers.add_parser('generate', help='generate help')
    generator_parser.add_argument(
        "--special-chars",
        required=False,
        help="The characters to be considered as 'special characters' for the "
            "purpose of filtering out ineligible passwords.",
        action="store",
        dest="special_chars",
        metavar="<chars>",
        default="!@#$%^&*()-_=+{}|[]\\;:'\",<.>/?",
        type=str
    )
    generator_parser.add_argument(
        "--illegal-chars",
        required=False,
        help="Characters that are not allowed in the generated passwords.",
        action="store",
        dest="illegal_chars",
        metavar="<chars>",
        default=None,
        type=str
    )
    generator_parser.add_argument(
        "--max-special",
        required=False,
        help="The maximum number of special characters per generated password.",
        action="store",
        dest="max_special_chars",
        metavar="<num>",
        default=None,
        type=int
    )
    generator_parser.add_argument(
        "--min-special",
        required=False,
        help="The minimum number of special characters per generated password.",
        action="store",
        dest="min_special_chars",
        metavar="<num>",
        default=None,
        type=int
    )
    generator_parser.add_argument(
        "--max-caps",
        required=False,
        help="The maximum number of capital letters per generated password.",
        action="store",
        dest="max_caps",
        metavar="<num>",
        default=None,
        type=int
    )
    generator_parser.add_argument(
        "--min-caps",
        required=False,
        help="The minimum number of capital letters per generated password.",
        action="store",
        dest="min_caps",
        metavar="<num>",
        default=None,
        type=int
    )
    generator_parser.add_argument(
        "--is-offline",
        required=False,
        help="Whether or not to configure the LavaPasswordFactory to produce a password "
            "list suited for offline attacks (significantly larger than for online "
            "attacks). Flying this flag enables the offline mode.",
        action="store_true",
        default=False,
        dest="is_offline"
    )
    generator_parser.add_argument(
        "--min-length",
        required=False,
        help="The minimum length for generated passwords.",
        action="store",
        default=8,
        dest="min_length",
        metavar="<len>",
        type=int
    )
    generator_parser.add_argument(
        "--max-length",
        required=False,
        help="The maximum length for generated passwords.",
        action="store",
        default=12,
        dest="max_length",
        metavar="<len>",
        type=int
    )
    generator_parser.add_argument(
        "--words",
        required=True,
        help="The list of words used as the seeds for the password generation process, "
            "seperated by spaces. For instance, \"hello goodbye\" would result in "
            "['hello', 'goodbye'] as the input words",
        action="store",
        dest="input_list",
        metavar="<word_list>"
    )
    generator_parser.add_argument(
        "--output-file",
        required=True,
        help="Path to the file that the resulting passwords should be written to.",
        action="store",
        dest="output_file",
        metavar="<file_path>",
        type=str
    )
    generator_parser.set_defaults(func=do_generate)
    cleaner_parser = subparsers.add_parser('clean', help='clean help')
    cleaner_parser.add_argument(
        "--special-chars",
        required=False,
        help="The characters to be considered as 'special characters' for the "
            "purpose of filtering out ineligible passwords.",
        action="store",
        dest="special_chars",
        metavar="<chars>",
        default="!@#$%^&*()-_=+{}|[]\\;:'\",<.>/?",
        type=str
    )
    cleaner_parser.add_argument(
        "--illegal-chars",
        required=False,
        help="Characters that are not allowed in the generated passwords.",
        action="store",
        dest="illegal_chars",
        metavar="<chars>",
        default=None,
        type=str
    )
    cleaner_parser.add_argument(
        "--max-special",
        required=False,
        help="The maximum number of special characters per generated password.",
        action="store",
        dest="max_special_chars",
        metavar="<num>",
        default=None,
        type=int
    )
    cleaner_parser.add_argument(
        "--min-special",
        required=False,
        help="The minimum number of special characters per generated password.",
        action="store",
        dest="min_special_chars",
        metavar="<num>",
        default=None,
        type=int
    )
    cleaner_parser.add_argument(
        "--max-caps",
        required=False,
        help="The maximum number of capital letters per generated password.",
        action="store",
        dest="max_caps",
        metavar="<num>",
        default=None,
        type=int
    )
    cleaner_parser.add_argument(
        "--min-caps",
        required=False,
        help="The minimum number of capital letters per generated password.",
        action="store",
        dest="min_caps",
        metavar="<num>",
        default=None,
        type=int
    )
    cleaner_parser.add_argument(
        "--min-length",
        required=False,
        help="The minimum length for generated passwords.",
        action="store",
        default=8,
        dest="min_length",
        metavar="<len>",
        type=int
    )
    cleaner_parser.add_argument(
        "--max-length",
        required=False,
        help="The maximum length for generated passwords.",
        action="store",
        default=12,
        dest="max_length",
        metavar="<len>",
        type=int
    )
    cleaner_parser.add_argument(
        "--input-file",
        required=True,
        help="Path to the file that the existing password list to clean resides in.",
        action="store",
        dest="input_file",
        metavar="<file_path>",
        type=str
    )
    cleaner_parser.add_argument(
        "--output-file",
        required=True,
        help="Path to the file that the resulting passwords should be written to.",
        action="store",
        dest="output_file",
        metavar="<file_path>",
        type=str
    )
    cleaner_parser.set_defaults(func=do_clean)
    return parser.parse_args()


def print_greeting():
    print(LavaLib.LavaUIFactory.get_colorized_lavalamp_splash())
    print("                         /***************************\                             ")
    print("-= Presents the \033[31mLavaPasswordFactory\033[0m, for all your password list generation needs =-")
    print("                         \***************************/                             ")
    print("")


def validate_arguments(arguments):
    pass

logger = logging.getLogger("LavaPasswordFactory")

if __name__ == '__main__':
    main()

#TODO Do sort+uniq for the offline lists after list creation completes
#TODO Configurable interval for cleaning reporting
#TODO Configurable interval for offline list reporting
#TODO Finish filling out clean_arguments function
#TODO Fill out validate_arguments function
#TODO Write unit tests
#TODO Throw exceptions for setters for properties that shouldn't be assigned to
#TODO Do the logging.whatever thing that Moloch recommended.
#TODO Verify that the basic_permutations property will contain all permutations other than those with repeats (ie: no FoxFox)
#TODO Consider ONLY creating passwords of the specified length in the __gen function - might be too much of a headache